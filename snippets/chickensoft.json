{
  "Chickensoft AutoNode": {
    "scope": "cs",
    "isFileTemplate": true,
    "prefix": ["autonode"],
    "body": [
      "namespace ${1:$WORKSPACE_NAME};",
      "",
      "using Chickensoft.AutoInject;",
      "using Chickensoft.Introspection;",
      "using Godot;",
      "",
      "[Meta(typeof(IAutoNode))]",
      "public partial class ${2:$TM_FILENAME_BASE} : ${3:Node} {",
      "  public override void _Notification(int what) => this.Notify(what);",
      "$0",
      "}",
      ""
    ],
    "description": "Chickensoft AutoNode template"
  },
  "Chickensoft AutoInject Provision": {
    "scope": "cs",
    "prefix": ["provide"],
    "body": [
      "${1:ProvisionType} IProvide<${1:ProvisionType}>.Value() => ${2:ProvisionValue};"
    ],
    "description": "Chickensoft AutoInject IProvide implementation"
  },
  "Chickensoft AutoInject Dependency": {
    "scope": "cs",
    "prefix": ["depend"],
    "body": [
      "[Dependency] ${1:public} ${2:DependencyType} ${3:DependencyValue} => this.DependOn<${2:DependencyType}>();"
    ],
    "description": "Chickensoft AutoInject Dependency attribute"
  },
  "Chickensoft AutoProp": {
    "scope": "cs",
    "prefix": ["autoprop"],
    "body": [
      "public IAutoProp<${1:PropType}> ${2:PublicPropName} => ${3:_privatePropName};",
      "private readonly AutoProp<${1:PropType}> ${3:_privatePropName} = new($0);"
    ],
    "description": "Chickensoft Collections AutoProp attribute"
  },
  "Chickensoft LogicBlock": {
    "scope": "cs",
    "isFileTemplate": true,
    "prefix": ["logicblock", "lb"],
    "body": [
      "namespace ${1:$WORKSPACE_NAME};",
      "",
      "using Chickensoft.Introspection;",
      "using Chickensoft.LogicBlocks;",
      "",
      "[Meta, LogicBlock(typeof(State), Diagram = true)]",
      "public partial class ${2:$TM_FILENAME_BASE} : LogicBlock<${2:$TM_FILENAME_BASE}.State> {",
      "  public override Transition GetInitialState() => To<${3:State}>();",
      "$0",
      "  public abstract partial record State : StateLogic<State>;",
      "}",
      ""
    ],
    "description": "Chickensoft LogicBlock template"
  },
  "Chickensoft LogicBlock Inputs": {
    "scope": "cs",
    "isFileTemplate": true,
    "prefix": ["logicblock-input", "lbin"],
    "body": [
      "namespace ${1:$WORKSPACE_NAME};",
      "",
      "public partial class ${2:${TM_FILENAME_BASE/([a-zA-Z0-9_]*)([\\.]Input)/$1/}} {",
      "  public static class Input {",
      "    public readonly record struct ${3:MyInput};",
      "  }",
      "}",
      ""
    ],
    "description": "Chickensoft LogicBlock Input class"
  },
  "Chickensoft LogicBlock Outputs": {
    "scope": "cs",
    "isFileTemplate": true,
    "prefix": ["logicblock-output", "lbout"],
    "body": [
      "namespace ${1:$WORKSPACE_NAME};",
      "",
      "public partial class ${2:${TM_FILENAME_BASE/([a-zA-Z0-9_]*)([\\.]Output)/$1/}} {",
      "  public static class Output {",
      "    public readonly record struct ${3:MyOutput};",
      "  }",
      "}",
      ""
    ],
    "description": "Chickensoft LogicBlock Output class"
  }
}
